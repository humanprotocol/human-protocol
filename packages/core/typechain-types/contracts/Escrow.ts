/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EscrowInterface extends utils.Interface {
  functions: {
    "abort()": FunctionFragment;
    "addTrustedHandlers(address[])": FunctionFragment;
    "areTrustedHandlers(address)": FunctionFragment;
    "bulkPayOut(address[],uint256[],string,string,uint256)": FunctionFragment;
    "cancel()": FunctionFragment;
    "canceler()": FunctionFragment;
    "complete()": FunctionFragment;
    "duration()": FunctionFragment;
    "finalResultsHash()": FunctionFragment;
    "finalResultsUrl()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "launcher()": FunctionFragment;
    "manifestHash()": FunctionFragment;
    "manifestUrl()": FunctionFragment;
    "recordingOracle()": FunctionFragment;
    "recordingOracleStake()": FunctionFragment;
    "reputationOracle()": FunctionFragment;
    "reputationOracleStake()": FunctionFragment;
    "setup(address,address,uint256,uint256,string,string)": FunctionFragment;
    "status()": FunctionFragment;
    "storeResults(address,string,string)": FunctionFragment;
    "token()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "abort"
      | "addTrustedHandlers"
      | "areTrustedHandlers"
      | "bulkPayOut"
      | "cancel"
      | "canceler"
      | "complete"
      | "duration"
      | "finalResultsHash"
      | "finalResultsUrl"
      | "getBalance"
      | "launcher"
      | "manifestHash"
      | "manifestUrl"
      | "recordingOracle"
      | "recordingOracleStake"
      | "reputationOracle"
      | "reputationOracleStake"
      | "setup"
      | "status"
      | "storeResults"
      | "token"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "abort", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTrustedHandlers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "areTrustedHandlers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkPayOut",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "canceler", values?: undefined): string;
  encodeFunctionData(functionFragment: "complete", values?: undefined): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalResultsHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalResultsUrl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "launcher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "manifestHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "manifestUrl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordingOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordingOracleStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationOracleStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storeResults",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "abort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedHandlers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areTrustedHandlers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bulkPayOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canceler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalResultsHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalResultsUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "launcher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manifestHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manifestUrl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordingOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordingOracleStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationOracleStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "BulkTransfer(uint256,address[],uint256[],bool)": EventFragment;
    "Cancelled()": EventFragment;
    "Completed()": EventFragment;
    "IntermediateStorage(address,string,string)": EventFragment;
    "Pending(string,string)": EventFragment;
    "TrustedHandlerAdded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BulkTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntermediateStorage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pending"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedHandlerAdded"): EventFragment;
}

export interface BulkTransferEventObject {
  _txId: BigNumber;
  _recipients: string[];
  _amounts: BigNumber[];
  _isPartial: boolean;
}
export type BulkTransferEvent = TypedEvent<
  [BigNumber, string[], BigNumber[], boolean],
  BulkTransferEventObject
>;

export type BulkTransferEventFilter = TypedEventFilter<BulkTransferEvent>;

export interface CancelledEventObject {}
export type CancelledEvent = TypedEvent<[], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface CompletedEventObject {}
export type CompletedEvent = TypedEvent<[], CompletedEventObject>;

export type CompletedEventFilter = TypedEventFilter<CompletedEvent>;

export interface IntermediateStorageEventObject {
  _sender: string;
  _url: string;
  _hash: string;
}
export type IntermediateStorageEvent = TypedEvent<
  [string, string, string],
  IntermediateStorageEventObject
>;

export type IntermediateStorageEventFilter =
  TypedEventFilter<IntermediateStorageEvent>;

export interface PendingEventObject {
  manifest: string;
  hash: string;
}
export type PendingEvent = TypedEvent<[string, string], PendingEventObject>;

export type PendingEventFilter = TypedEventFilter<PendingEvent>;

export interface TrustedHandlerAddedEventObject {
  _handler: string;
}
export type TrustedHandlerAddedEvent = TypedEvent<
  [string],
  TrustedHandlerAddedEventObject
>;

export type TrustedHandlerAddedEventFilter =
  TypedEventFilter<TrustedHandlerAddedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    areTrustedHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canceler(overrides?: CallOverrides): Promise<[string]>;

    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalResultsHash(overrides?: CallOverrides): Promise<[string]>;

    finalResultsUrl(overrides?: CallOverrides): Promise<[string]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    launcher(overrides?: CallOverrides): Promise<[string]>;

    manifestHash(overrides?: CallOverrides): Promise<[string]>;

    manifestUrl(overrides?: CallOverrides): Promise<[string]>;

    recordingOracle(overrides?: CallOverrides): Promise<[string]>;

    recordingOracleStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    reputationOracle(overrides?: CallOverrides): Promise<[string]>;

    reputationOracleStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number]>;

    storeResults(
      _sender: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  abort(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTrustedHandlers(
    _handlers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  areTrustedHandlers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bulkPayOut(
    _recipients: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _url: PromiseOrValue<string>,
    _hash: PromiseOrValue<string>,
    _txId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canceler(overrides?: CallOverrides): Promise<string>;

  complete(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  finalResultsHash(overrides?: CallOverrides): Promise<string>;

  finalResultsUrl(overrides?: CallOverrides): Promise<string>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  launcher(overrides?: CallOverrides): Promise<string>;

  manifestHash(overrides?: CallOverrides): Promise<string>;

  manifestUrl(overrides?: CallOverrides): Promise<string>;

  recordingOracle(overrides?: CallOverrides): Promise<string>;

  recordingOracleStake(overrides?: CallOverrides): Promise<BigNumber>;

  reputationOracle(overrides?: CallOverrides): Promise<string>;

  reputationOracleStake(overrides?: CallOverrides): Promise<BigNumber>;

  setup(
    _reputationOracle: PromiseOrValue<string>,
    _recordingOracle: PromiseOrValue<string>,
    _reputationOracleStake: PromiseOrValue<BigNumberish>,
    _recordingOracleStake: PromiseOrValue<BigNumberish>,
    _url: PromiseOrValue<string>,
    _hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  storeResults(
    _sender: PromiseOrValue<string>,
    _url: PromiseOrValue<string>,
    _hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    abort(overrides?: CallOverrides): Promise<void>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    areTrustedHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<boolean>;

    canceler(overrides?: CallOverrides): Promise<string>;

    complete(overrides?: CallOverrides): Promise<void>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    finalResultsHash(overrides?: CallOverrides): Promise<string>;

    finalResultsUrl(overrides?: CallOverrides): Promise<string>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    launcher(overrides?: CallOverrides): Promise<string>;

    manifestHash(overrides?: CallOverrides): Promise<string>;

    manifestUrl(overrides?: CallOverrides): Promise<string>;

    recordingOracle(overrides?: CallOverrides): Promise<string>;

    recordingOracleStake(overrides?: CallOverrides): Promise<BigNumber>;

    reputationOracle(overrides?: CallOverrides): Promise<string>;

    reputationOracleStake(overrides?: CallOverrides): Promise<BigNumber>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    storeResults(
      _sender: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BulkTransfer(uint256,address[],uint256[],bool)"(
      _txId?: PromiseOrValue<BigNumberish> | null,
      _recipients?: null,
      _amounts?: null,
      _isPartial?: null
    ): BulkTransferEventFilter;
    BulkTransfer(
      _txId?: PromiseOrValue<BigNumberish> | null,
      _recipients?: null,
      _amounts?: null,
      _isPartial?: null
    ): BulkTransferEventFilter;

    "Cancelled()"(): CancelledEventFilter;
    Cancelled(): CancelledEventFilter;

    "Completed()"(): CompletedEventFilter;
    Completed(): CompletedEventFilter;

    "IntermediateStorage(address,string,string)"(
      _sender?: null,
      _url?: null,
      _hash?: null
    ): IntermediateStorageEventFilter;
    IntermediateStorage(
      _sender?: null,
      _url?: null,
      _hash?: null
    ): IntermediateStorageEventFilter;

    "Pending(string,string)"(manifest?: null, hash?: null): PendingEventFilter;
    Pending(manifest?: null, hash?: null): PendingEventFilter;

    "TrustedHandlerAdded(address)"(
      _handler?: null
    ): TrustedHandlerAddedEventFilter;
    TrustedHandlerAdded(_handler?: null): TrustedHandlerAddedEventFilter;
  };

  estimateGas: {
    abort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    areTrustedHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canceler(overrides?: CallOverrides): Promise<BigNumber>;

    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    finalResultsHash(overrides?: CallOverrides): Promise<BigNumber>;

    finalResultsUrl(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    launcher(overrides?: CallOverrides): Promise<BigNumber>;

    manifestHash(overrides?: CallOverrides): Promise<BigNumber>;

    manifestUrl(overrides?: CallOverrides): Promise<BigNumber>;

    recordingOracle(overrides?: CallOverrides): Promise<BigNumber>;

    recordingOracleStake(overrides?: CallOverrides): Promise<BigNumber>;

    reputationOracle(overrides?: CallOverrides): Promise<BigNumber>;

    reputationOracleStake(overrides?: CallOverrides): Promise<BigNumber>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    storeResults(
      _sender: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    abort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    areTrustedHandlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canceler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalResultsHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalResultsUrl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    launcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manifestHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manifestUrl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordingOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordingOracleStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reputationOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reputationOracleStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storeResults(
      _sender: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
