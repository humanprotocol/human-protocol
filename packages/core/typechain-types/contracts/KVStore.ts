/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface KVStoreInterface extends utils.Interface {
  functions: {
    "get(address,string)": FunctionFragment;
    "set(string,string)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "get" | "set"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "get",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;

  events: {
    "DataSaved(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataSaved"): EventFragment;
}

export interface DataSavedEventObject {
  sender: string;
  key: string;
  value: string;
}
export type DataSavedEvent = TypedEvent<
  [string, string, string],
  DataSavedEventObject
>;

export type DataSavedEventFilter = TypedEventFilter<DataSavedEvent>;

export interface KVStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KVStoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get(
      _account: PromiseOrValue<string>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    set(
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  get(
    _account: PromiseOrValue<string>,
    _key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  set(
    _key: PromiseOrValue<string>,
    _value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    get(
      _account: PromiseOrValue<string>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    set(
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DataSaved(address,string,string)"(
      sender?: PromiseOrValue<string> | null,
      key?: null,
      value?: null
    ): DataSavedEventFilter;
    DataSaved(
      sender?: PromiseOrValue<string> | null,
      key?: null,
      value?: null
    ): DataSavedEventFilter;
  };

  estimateGas: {
    get(
      _account: PromiseOrValue<string>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get(
      _account: PromiseOrValue<string>,
      _key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _key: PromiseOrValue<string>,
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
