/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IEscrowInterface extends utils.Interface {
  functions: {
    "abort()": FunctionFragment;
    "addTrustedHandlers(address[])": FunctionFragment;
    "bulkPayOut(address[],uint256[],string,string,uint256)": FunctionFragment;
    "cancel()": FunctionFragment;
    "complete()": FunctionFragment;
    "setup(address,address,uint256,uint256,string,string)": FunctionFragment;
    "status()": FunctionFragment;
    "storeResults(address,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "abort"
      | "addTrustedHandlers"
      | "bulkPayOut"
      | "cancel"
      | "complete"
      | "setup"
      | "status"
      | "storeResults"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "abort", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addTrustedHandlers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkPayOut",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "complete", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "storeResults",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "abort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedHandlers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bulkPayOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "complete", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeResults",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number]>;

    storeResults(
      _worker: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  abort(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTrustedHandlers(
    _handlers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bulkPayOut(
    _recipients: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _url: PromiseOrValue<string>,
    _hash: PromiseOrValue<string>,
    _txId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  complete(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setup(
    _reputationOracle: PromiseOrValue<string>,
    _recordingOracle: PromiseOrValue<string>,
    _reputationOracleStake: PromiseOrValue<BigNumberish>,
    _recordingOracleStake: PromiseOrValue<BigNumberish>,
    _url: PromiseOrValue<string>,
    _hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  storeResults(
    _worker: PromiseOrValue<string>,
    _url: PromiseOrValue<string>,
    _hash: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    abort(overrides?: CallOverrides): Promise<void>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<boolean>;

    complete(overrides?: CallOverrides): Promise<void>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    storeResults(
      _worker: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    abort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    storeResults(
      _worker: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abort(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedHandlers(
      _handlers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bulkPayOut(
      _recipients: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      _txId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    complete(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setup(
      _reputationOracle: PromiseOrValue<string>,
      _recordingOracle: PromiseOrValue<string>,
      _reputationOracleStake: PromiseOrValue<BigNumberish>,
      _recordingOracleStake: PromiseOrValue<BigNumberish>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    storeResults(
      _worker: PromiseOrValue<string>,
      _url: PromiseOrValue<string>,
      _hash: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
