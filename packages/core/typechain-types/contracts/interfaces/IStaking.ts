/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IStaking {
  export type AllocationStruct = {
    escrowAddress: PromiseOrValue<string>;
    staker: PromiseOrValue<string>;
    tokens: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    closedAt: PromiseOrValue<BigNumberish>;
  };

  export type AllocationStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    escrowAddress: string;
    staker: string;
    tokens: BigNumber;
    createdAt: BigNumber;
    closedAt: BigNumber;
  };
}

export declare namespace Stakes {
  export type StakerStruct = {
    tokensStaked: PromiseOrValue<BigNumberish>;
    tokensAllocated: PromiseOrValue<BigNumberish>;
    tokensLocked: PromiseOrValue<BigNumberish>;
    tokensLockedUntil: PromiseOrValue<BigNumberish>;
  };

  export type StakerStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokensStaked: BigNumber;
    tokensAllocated: BigNumber;
    tokensLocked: BigNumber;
    tokensLockedUntil: BigNumber;
  };
}

export interface IStakingInterface extends utils.Interface {
  functions: {
    "allocate(address,uint256)": FunctionFragment;
    "closeAllocation(address)": FunctionFragment;
    "getAllocation(address)": FunctionFragment;
    "getAllocationState(address)": FunctionFragment;
    "getListOfStakers()": FunctionFragment;
    "getStakedTokens(address)": FunctionFragment;
    "getStaker(address)": FunctionFragment;
    "hasAvailableStake(address)": FunctionFragment;
    "hasStake(address)": FunctionFragment;
    "isAllocation(address)": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "setLockPeriod(uint32)": FunctionFragment;
    "setMinimumStake(uint256)": FunctionFragment;
    "setRewardPool(address)": FunctionFragment;
    "slash(address,address,address,uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allocate"
      | "closeAllocation"
      | "getAllocation"
      | "getAllocationState"
      | "getListOfStakers"
      | "getStakedTokens"
      | "getStaker"
      | "hasAvailableStake"
      | "hasStake"
      | "isAllocation"
      | "rewardPool"
      | "setLockPeriod"
      | "setMinimumStake"
      | "setRewardPool"
      | "slash"
      | "stake"
      | "unstake"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeAllocation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocationState",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getListOfStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaker",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAvailableStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAllocation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLockPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListOfStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStaker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAvailableStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocate(
      escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IStaking.AllocationStructOutput]>;

    getAllocationState(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getListOfStakers(
      overrides?: CallOverrides
    ): Promise<[string[], Stakes.StakerStructOutput[]]>;

    getStakedTokens(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStaker(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Stakes.StakerStructOutput]>;

    hasAvailableStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardPool(overrides?: CallOverrides): Promise<[string]>;

    setLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumStake(
      _minimumStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardPool(
      _rewardPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slash(
      _slasher: PromiseOrValue<string>,
      _staker: PromiseOrValue<string>,
      _escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allocate(
    escrowAddress: PromiseOrValue<string>,
    _tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeAllocation(
    _escrowAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllocation(
    _escrowAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IStaking.AllocationStructOutput>;

  getAllocationState(
    _escrowAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getListOfStakers(
    overrides?: CallOverrides
  ): Promise<[string[], Stakes.StakerStructOutput[]]>;

  getStakedTokens(
    _staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStaker(
    _staker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Stakes.StakerStructOutput>;

  hasAvailableStake(
    _indexer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasStake(
    _indexer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAllocation(
    _escrowAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardPool(overrides?: CallOverrides): Promise<string>;

  setLockPeriod(
    _lockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumStake(
    _minimumStake: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardPool(
    _rewardPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slash(
    _slasher: PromiseOrValue<string>,
    _staker: PromiseOrValue<string>,
    _escrowAddress: PromiseOrValue<string>,
    _tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    _tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _tokens: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocate(
      escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IStaking.AllocationStructOutput>;

    getAllocationState(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getListOfStakers(
      overrides?: CallOverrides
    ): Promise<[string[], Stakes.StakerStructOutput[]]>;

    getStakedTokens(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStaker(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Stakes.StakerStructOutput>;

    hasAvailableStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardPool(overrides?: CallOverrides): Promise<string>;

    setLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumStake(
      _minimumStake: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPool(
      _rewardPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    slash(
      _slasher: PromiseOrValue<string>,
      _staker: PromiseOrValue<string>,
      _escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allocate(
      escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllocationState(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListOfStakers(overrides?: CallOverrides): Promise<BigNumber>;

    getStakedTokens(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStaker(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasAvailableStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumStake(
      _minimumStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardPool(
      _rewardPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slash(
      _slasher: PromiseOrValue<string>,
      _staker: PromiseOrValue<string>,
      _escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllocationState(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListOfStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakedTokens(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStaker(
      _staker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasAvailableStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasStake(
      _indexer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAllocation(
      _escrowAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumStake(
      _minimumStake: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPool(
      _rewardPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slash(
      _slasher: PromiseOrValue<string>,
      _staker: PromiseOrValue<string>,
      _escrowAddress: PromiseOrValue<string>,
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _tokens: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
