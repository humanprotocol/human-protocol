"""Add assignment updated-at

Revision ID: 2cbc85686054
Revises: 0f3fb7bfcbcf
Create Date: 2024-09-24 19:18:23.248579

"""

import enum

import sqlalchemy as sa
from sqlalchemy import Column, DateTime, Enum, String
from sqlalchemy.orm import Session, declarative_base
from sqlalchemy.sql import func

from alembic import op

# revision identifiers, used by Alembic.
revision = "2cbc85686054"
down_revision = "0f3fb7bfcbcf"
branch_labels = None
depends_on = None


Base = declarative_base()


class AssignmentStatuses(str, enum.Enum):
    created = "created"
    completed = "completed"
    expired = "expired"
    rejected = "rejected"
    canceled = "canceled"


class Assignment(Base):
    # Represents the model before the transaction is applied

    __tablename__ = "assignments"
    id = Column(String, primary_key=True, index=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now(), server_default=func.now())
    expires_at = Column(DateTime(timezone=True), nullable=False)
    completed_at = Column(DateTime(timezone=True), nullable=True, server_default=None)
    status = Column(
        String,
        Enum(AssignmentStatuses),
        server_default=AssignmentStatuses.created.value,
        nullable=False,
    )


def define_initial_updated_at():
    bind = op.get_bind()
    session = Session(bind=bind)

    session.query(Assignment).filter(
        Assignment.updated_at == None,
        Assignment.status.in_(
            [AssignmentStatuses.expired, AssignmentStatuses.rejected, AssignmentStatuses.canceled]
        ),
    ).update({Assignment.updated_at: Assignment.expires_at})

    session.query(Assignment).filter(
        Assignment.updated_at == None,
        Assignment.status == AssignmentStatuses.completed,
    ).update({Assignment.updated_at: Assignment.completed_at})

    session.query(Assignment).filter(
        Assignment.updated_at == None,
        # fallback for invalid entries above + handling of status == "created"
    ).update({Assignment.updated_at: Assignment.created_at})


def upgrade() -> None:
    # This operation can fail because of null values, it's intentional.
    # Invalid entries in the DB must be fixed in order to proceed
    op.alter_column("assignments", "created_at", nullable=False)

    op.add_column("assignments", sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True))
    define_initial_updated_at()
    op.alter_column("assignments", "updated_at", server_default=sa.text("now()"), nullable=False)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("assignments", "updated_at")
    # ### end Alembic commands ###
