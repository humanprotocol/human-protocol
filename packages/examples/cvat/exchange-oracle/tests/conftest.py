import os
from collections.abc import Generator
from dataclasses import dataclass
from io import StringIO
from pathlib import Path

os.environ["DEBUG"] = "1"

import pytest
from fastapi.testclient import TestClient
from sqlalchemy import TextClause, text
from sqlalchemy.orm import Session
from sqlalchemy_utils import create_database, database_exists, drop_database

from alembic import command as alembic_command
from alembic.config import Config
from src import app
from src.db import SessionLocal, engine

alembic_config = Config(Path(__file__).parent.parent / "alembic.ini")


@dataclass
class AlembicSQL:
    upgrade: TextClause
    downgrade: TextClause


@pytest.fixture(scope="session")
def alembic() -> AlembicSQL:
    """
    Captures the SQL generated by Alembic for upgrade/downgrade operations.
    Doesn't actually run migrations.
    """
    alembic_config.output_buffer = StringIO()
    alembic_command.upgrade(alembic_config, "head", sql=True)
    upgrade_sql = alembic_config.output_buffer.getvalue()

    alembic_config.output_buffer = StringIO()
    alembic_command.downgrade(alembic_config, "head:base", sql=True)
    downgrade_sql = alembic_config.output_buffer.getvalue()

    return AlembicSQL(text(upgrade_sql), text(downgrade_sql))


@pytest.fixture(scope="session", autouse=True)
def setup_db(alembic) -> None:
    assert "test" in engine.url.database, "The test database must be used for testing."
    if database_exists(engine.url):
        drop_database(engine.url)
    create_database(engine.url)
    yield  # Run the test cases

    # Upgrade to the latest version after all tests are done,
    # this helps with inspection of the latest schema.
    with engine.connect() as connection:
        connection.execute(alembic.upgrade)


@pytest.fixture(autouse=True)
def init_db(alembic) -> None:
    """
    Runs the recorded Alembic upgrade and downgrade SQL for each test.
    This ensures correctness of alembic migrations.
    """
    try:
        with engine.connect() as connection:
            connection.execute(alembic.upgrade)
    except Exception as e:
        raise RuntimeError(
            "Failed to upgrade migrations, `alembic upgrade head` would fail."
            " inspect the cause error and change migrations accordingly."
        ) from e

    yield  # Run the test case

    try:
        with engine.connect() as connection:
            connection.execute(alembic.downgrade)
    except Exception as e:
        raise RuntimeError(
            "Failed to downgrade migrations, `alembic downgrade head:base` would fail."
            " inspect the cause error and change migrations accordingly."
        ) from e


@pytest.fixture(scope="module")
def client() -> Generator:
    with TestClient(app) as c:
        yield c


@pytest.fixture
def session() -> Generator[Session, None, None]:
    session = SessionLocal()

    try:
        yield session
    finally:
        session.rollback()
        session.close()
