##################################################
#                    Entities                    #
##################################################

type Holder @entity(immutable: false) {
  id: Bytes!
  address: Bytes! # address
  balance: BigInt!
}

type Worker @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  totalHMTAmountReceived: BigInt!
  payoutCount: BigInt!
}

type UniqueSender @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  transferCount: BigInt!
  timestamp: BigInt!
}

type UniqueReceiver @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  receiveCount: BigInt!
  timestamp: BigInt!
}

type Operator @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  amountJobsProcessed: BigInt!
  role: String
  fee: BigInt
  publicKey: String
  webhookUrl: String
  website: String
  jobTypes: [String!]
  url: String
  urls: [OperatorURL!]! @derivedFrom(field: "operator")
  reputationNetworks: [ReputationNetwork!]
  registrationNeeded: Boolean
  registrationInstructions: String

  name: String
  category: String

  staker: Staker @derivedFrom(field: "operator")
}

type OperatorURL @entity(immutable: false) {
  id: Bytes!
  key: String
  url: String
  operator: Operator!
}

type ReputationNetwork @entity(immutable: false) {
  id: Bytes!
  address: Bytes!
  operators: [Operator!]! @derivedFrom(field: "reputationNetworks")
}

type Escrow @entity(immutable: false) {
  id: Bytes!
  address: Bytes! # address
  token: Bytes! # address
  factoryAddress: Bytes! # address
  launcher: Bytes! # address
  canceler: Bytes! # address
  count: BigInt!
  balance: BigInt!
  totalFundedAmount: BigInt!
  amountPaid: BigInt!
  status: String! # string
  manifestUrl: String # string
  manifestHash: String # string
  reputationOracle: Bytes # address
  recordingOracle: Bytes # address
  exchangeOracle: Bytes # address
  intermediateResultsUrl: String # string
  finalResultsUrl: String # string
  jobRequesterId: String # string
  createdAt: BigInt!
}

type Payout @entity(immutable: true) {
  id: Bytes!
  escrowAddress: Bytes! # address
  recipient: Bytes! # address
  amount: BigInt!
  createdAt: BigInt!
}

type DailyWorker @entity(immutable: true) {
  id: Bytes!
  timestamp: BigInt!
  address: Bytes! # address
  escrowAddress: Bytes! # address
}

##################################################
#                     Events                     #
##################################################

# HMToken
type HMTTransferEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  from: Bytes! # address
  to: Bytes! # address
  amount: BigInt!
}

type HMTBulkTransferEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  txId: BigInt!
  bulkCount: BigInt!
}

type HMTApprovalEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  owner: Bytes! # address
  spender: Bytes! # address
  amount: BigInt!
}

type HMTBulkApprovalEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  txId: BigInt!
  bulkCount: BigInt!
}

# Escrow
type FundEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  escrowAddress: Bytes! # address
  sender: Bytes! # address
  amount: BigInt!
}

type PendingEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  escrowAddress: Bytes! # address
  sender: Bytes! # address
}

type StoreResultsEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  escrowAddress: Bytes! # address
  sender: Bytes! # address
  intermediateResultsUrl: String! # string
}

type BulkPayoutEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  escrowAddress: Bytes! # address
  sender: Bytes! # address
  bulkPayoutTxId: BigInt!
  bulkCount: BigInt!
}

type EscrowStatusEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  escrowAddress: Bytes! # address
  launcher: Bytes # address
  sender: Bytes! # address
  status: String!
}

type WithdrawEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  escrowAddress: Bytes! # address
  sender: Bytes! # address
  receiver: Bytes! # address
  token: Bytes! # address
  amount: BigInt!
}

# KVStore
type KVStoreSetEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  operatorAddress: Bytes! # address
  key: String!
  value: String!
}

type KVStore @entity(immutable: false) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  address: Bytes!
  key: String!
  value: String!
}

# Staking
type Staker @entity(immutable: false) {
  id: Bytes!
  address: Bytes! # address
  stakedAmount: BigInt!
  lockedAmount: BigInt!
  withdrawnAmount: BigInt!
  slashedAmount: BigInt!
  lockedUntilTimestamp: BigInt!
  lastDepositTimestamp: BigInt!

  operator: Operator
}

type StakeDepositedEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  staker: Bytes! # address
  amount: BigInt!
}

type StakeLockedEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  staker: Bytes! # address
  amount: BigInt!
  lockedUntilTimestamp: BigInt!
}

type StakeWithdrawnEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  staker: Bytes! # address
  amount: BigInt!
}

type StakeSlashedEvent @entity(immutable: true) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!

  escrowAddress: Bytes! # address
  staker: Bytes! # address
  slashRequester: Bytes! # address
  amount: BigInt!
}

##################################################
#                   Statistics                   #
##################################################

type HMTokenStatistics @entity(immutable: false) {
  id: Bytes!
  totalTransferEventCount: BigInt!
  totalBulkTransferEventCount: BigInt!
  totalApprovalEventCount: BigInt!
  totalBulkApprovalEventCount: BigInt!
  totalValueTransfered: BigInt!
  holders: BigInt!
}

type EscrowStatistics @entity(immutable: false) {
  id: Bytes!
  fundEventCount: BigInt!
  storeResultsEventCount: BigInt!
  bulkPayoutEventCount: BigInt!
  pendingStatusEventCount: BigInt!
  cancelledStatusEventCount: BigInt!
  partialStatusEventCount: BigInt!
  paidStatusEventCount: BigInt!
  completedStatusEventCount: BigInt!
  totalEventCount: BigInt!
  totalEscrowCount: BigInt!
}

type EventDayData @entity(immutable: false) {
  id: Bytes!
  timestamp: Int!
  dailyFundEventCount: BigInt!
  dailyStoreResultsEventCount: BigInt!
  dailyBulkPayoutEventCount: BigInt!
  dailyPendingStatusEventCount: BigInt!
  dailyCancelledStatusEventCount: BigInt!
  dailyPartialStatusEventCount: BigInt!
  dailyPaidStatusEventCount: BigInt!
  dailyCompletedStatusEventCount: BigInt!
  dailyTotalEventCount: BigInt!
  dailyEscrowCount: BigInt!
  dailyWorkerCount: BigInt!
  dailyPayoutCount: BigInt!
  dailyHMTPayoutAmount: BigInt!
  dailyHMTTransferCount: BigInt!
  dailyHMTTransferAmount: BigInt!
  dailyUniqueSenders: BigInt!
  dailyUniqueReceivers: BigInt!
}

type Transaction @entity(immutable: false) {
  id: Bytes!
  block: BigInt!
  timestamp: BigInt!
  txHash: Bytes!
  from: Bytes!
  to: Bytes!
  receiver: Bytes
  escrow: Bytes
  value: BigInt!
  method: String!
  token: Bytes
  internalTransactions: [InternalTransaction!]
    @derivedFrom(field: "transaction")
}

type InternalTransaction @entity(immutable: false) {
  id: Bytes!
  from: Bytes!
  to: Bytes!
  receiver: Bytes
  escrow: Bytes
  value: BigInt!
  token: Bytes
  method: String!
  transaction: Transaction!
}
