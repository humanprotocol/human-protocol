specVersion: 0.0.5
description: '{{ description }}'
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum
    name: EscrowFactory
    network: '{{ network }}'
    source:
      abi: EscrowFactory
      address: '{{ EscrowFactory.address }}'
      startBlock: {{ EscrowFactory.startBlock }}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      file: ./src/mapping/EscrowFactory.ts
      entities:
        - Launched
      abis:
        - name: EscrowFactory
          file: '{{{ EscrowFactory.abi }}}'
      eventHandlers:
        - event: Launched(address,address)
          handler: handleLaunched
        - event: LaunchedV2(address,address,string)
          handler: handleLaunchedV2
  - kind: ethereum
    name: HMToken
    network: '{{ network }}'
    source:
      abi: HMToken
      address: '{{ HMToken.address }}'
      startBlock: {{ HMToken.startBlock }}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - Approval
        - BulkApproval
        - BulkTransfer
        - Transfer
      abis:
        - name: HMToken
          file: '{{{ HMToken.abi }}}'
      eventHandlers:
        - event: Approval(indexed address,indexed address,uint256)
          handler: handleApproval
        - event: BulkApproval(indexed uint256,uint256)
          handler: handleBulkApproval
        - event: BulkTransfer(indexed uint256,uint256)
          handler: handleBulkTransfer
        - event: Transfer(indexed address,indexed address,uint256)
          handler: handleTransfer
      file: ./src/mapping/HMToken.ts
  - kind: ethereum
    name: KVStore
    network: '{{ network }}'
    source:
      abi: KVStore
      address: '{{ KVStore.address }}'
      startBlock: {{ KVStore.startBlock }}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - DataSaved
      abis:
        - name: KVStore
          file: '{{{ KVStore.abi }}}'
      eventHandlers:
        - event: DataSaved(indexed address,string,string)
          handler: handleDataSaved
      file: ./src/mapping/KVStore.ts
  - kind: ethereum
    name: Staking
    network: '{{ network }}'
    source:
      abi: Staking
      address: '{{ Staking.address }}'
      startBlock: {{ Staking.startBlock }}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - StakeDeposited
        - StakeLocked
        - StakeWithdrawn
        - StakeSlashed
        - StakeAllocated
        - AllocationClosed
      abis:
        - name: Staking
          file: '{{{ Staking.abi }}}'
      eventHandlers:
        - event: StakeDeposited(indexed address,uint256)
          handler: handleStakeDeposited
        - event: StakeLocked(indexed address,uint256,uint256)
          handler: handleStakeLocked
        - event: StakeWithdrawn(indexed address,uint256)
          handler: handleStakeWithdrawn
        - event: StakeSlashed(indexed address,uint256,indexed address,address)
          handler: handleStakeSlashed
        - event: StakeAllocated(indexed address,uint256,indexed address,uint256)
          handler: handleStakeAllocated
        - event: AllocationClosed(indexed address,uint256,indexed address,uint256)
          handler: handleAllocationClosed
      file: ./src/mapping/Staking.ts
  - kind: ethereum
    name: RewardPool
    network: '{{ network }}'
    source:
      abi: RewardPool
      address: '{{ RewardPool.address }}'
      startBlock: {{ RewardPool.startBlock }}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      entities:
        - RewardAdded
      abis:
        - name: RewardPool
          file: '{{{ RewardPool.abi }}}'
      eventHandlers:
        - event: RewardAdded(indexed address,indexed address,indexed address,uint256)
          handler: handleRewardAdded
      file: ./src/mapping/RewardPool.ts
{{ #LegacyEscrowFactory }}
  - kind: ethereum
    name: LegacyEscrowFactory
    network: '{{ network }}'
    source:
      abi: EscrowFactory
      address: '{{ LegacyEscrowFactory.address }}'
      startBlock: {{ LegacyEscrowFactory.startBlock }}
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      file: ./src/mapping/legacy/EscrowFactory.ts
      entities:
        - Launched
      abis:
        - name: EscrowFactory
          file: '{{{ LegacyEscrowFactory.abi }}}'
      eventHandlers:
        - event: Launched(address,address)
          handler: handleLaunched
{{ /LegacyEscrowFactory }}
templates:
  - name: Escrow
    kind: ethereum/contract
    network: '{{ network }}'
    source:
      abi: Escrow
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      file: ./src/mapping/Escrow.ts
      entities:
        - ISEvent
        - PEvent
      abis:
        - name: Escrow
          file: '{{{ Escrow.abi }}}'
        - name: LegacyEscrow
          file: '{{{ LegacyEscrow.abi }}}'
      eventHandlers:
        - event: IntermediateStorage(string,string)
          handler: handleIntermediateStorage
        - event: Pending(string,string)
          handler: handlePending
        - event: BulkTransfer(indexed uint256,address[],uint256[],bool)
          handler: handleBulkTransfer
        - event: Cancelled()
          handler: handleCancelled
        - event: Completed()
          handler: handleCompleted
  - name: LegacyEscrow
    kind: ethereum/contract
    network: '{{ network }}'
    source:
      abi: Escrow
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.7
      language: wasm/assemblyscript
      file: ./src/mapping/legacy/Escrow.ts
      entities:
        - ISEvent
        - PEvent
      abis:
        - name: Escrow
          file: '{{{ LegacyEscrow.abi }}}'
      eventHandlers:
        - event: IntermediateStorage(string,string)
          handler: handleIntermediateStorage
        - event: Pending(string,string)
          handler: handlePending
        - event: BulkTransfer(indexed uint256,uint256)
          handler: handleBulkTransfer
